
add_executable(server src/server.cpp)
ament_target_dependencies(server rclcpp example_interfaces)

=======================================================================================================================

install(TARGETS
    server
  DESTINATION lib/${PROJECT_NAME})

You could build your package now, source the local setup files, and run it, but let’s create the client node first so you can see the full system at work.


Write the client node

Inside the ros2_ws/src/cpp_srvcli/src directory, create a new file called add_two_ints_client.cpp and paste the code from the file "add_two_ints_client.cpp", available in the repository.


=======================================================================================================================


Add executable
Return to CMakeLists.txt to add the executable and target for the new node. 
After removing some unnecessary boilerplate from the automatically generated file, your CMakeLists.txt should look like this:

cmake_minimum_required(VERSION 3.5)
project(cpp_srvcli)

find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(example_interfaces REQUIRED)

add_executable(server src/add_two_ints_server.cpp)
ament_target_dependencies(server rclcpp example_interfaces)

add_executable(client src/add_two_ints_client.cpp)
ament_target_dependencies(client rclcpp example_interfaces)

install(TARGETS
  server
  client
  DESTINATION lib/${PROJECT_NAME})

ament_package()




Build and run
Navigate back to the root of your workspace, ros2_ws, and build your new package: 
colcon build --packages-select cpp_srvcli



Result

Open a new terminal, navigate to ros2_ws, and source the setup files:

source install/setup.bash

Now run the service node:

ros2 run cpp_srvcli server

The terminal should return the following message, and then wait:
[INFO] [rclcpp]: Ready to add two ints.

Open another terminal, source the setup files from inside ros2_ws again. Start the client node, followed by any two integers separated by a space:
ros2 run cpp_srvcli client 2 3

If you chose 2 and 3, for example, the client would receive a response like this:

[INFO] [rclcpp]: Sum: 5

Return to the terminal where your service node is running. 
You will see that it published log messages when it received the request and the data it received, and the response it sent back:

[INFO] [rclcpp]: Incoming request
a: 2 b: 3
[INFO] [rclcpp]: sending back response: [5]


Enter Ctrl+C in the server terminal to stop the node from spinning.

==============================================================================================================================================================
Python

Open a new terminal and source your ROS 2 installation so that ros2 commands will work.

Navigate into the ros2_ws directory.

Recall that packages should be created in the src directory, not the root of the workspace. Navigate into ros2_ws/src and create a new package:

    ros2 pkg create --build-type ament_python --license Apache-2.0 py_srvcli --dependencies rclpy example_interfaces

Your terminal will return a message verifying the creation of your package py_srvcli and all its necessary files and folders.

The --dependencies argument will automatically add the necessary dependency lines to package.xml. 
example_interfaces is the package that includes the .srv file you will need to structure your requests and responses:


Update package.xml

Because you used the --dependencies option during package creation, you don’t have to manually add dependencies to package.xml.

As always, though, make sure to add the description, maintainer email and name, and license information to package.xml.

<description>Python client server tutorial</description>
<maintainer email="you@email.com">Your Name</maintainer>
<license>Apache License 2.0</license>

Update setup.py
Add the same information to the setup.py file for the maintainer, maintainer_email, description and license fields:

maintainer='Your Name',
maintainer_email='you@email.com',
description='Python client server tutorial',
license='Apache License 2.0',

Inside the ros2_ws/src/py_srvcli/py_srvcli directory, 
create a new file called service_member_function.py and paste the code from file "service_member_function.py", available in repository.

========================================================================

Add an entry point
To allow the ros2 run command to run your node, you must add the entry point to setup.py (located in the ros2_ws/src/py_srvcli directory).

Add the following line between the 'console_scripts': brackets:

'service = py_srvcli.service_member_function:main',


Now write client code:
Inside the ros2_ws/src/py_srvcli/py_srvcli directory, 
create a new file called client_member_function.py and paste the code from file "client_member_function.py", available in repository.


Add an entry point
Like the service node, you also have to add an entry point to be able to run the client node.

entry_points={
    'console_scripts': [
        'service = py_srvcli.service_member_function:main',
        'client = py_srvcli.client_member_function:main',
    ],
},


Navigate back to the root of your workspace, ros2_ws, and build your new package:

colcon build --packages-select py_srvcli

Open a new terminal, navigate to ros2_ws, and source the setup files:
Now run the service node:
    ros2 run py_srvcli service

The node will wait for the client’s request.

Open another terminal and source the setup files from inside ros2_ws again. 
Start the client node, followed by any two integers separated by a space.

ros2 run py_srvcli client 2 3

See the result and stop operation using Ctrl+C.

